# Rixing Wu
# Lab 3
# 9/29/2015

# 1. Show (a * b)’ * (a’ + b) * (b’ + b) = a’
	  (a * b)’ * (a’ + b) * 1  = a’ Complement
	  (a * b)’ * (a’ + b)  = a’	  Identity
	  (a' + b') * (a’ + b) = a'     DeMorgan's
	   a' * (b’ + b) = a'		  Distributive
	   a * 1 = a’   		  Complement
	   a’ = a’			  Identity

# 2. Show c + (b * c)’ = 1
	   c + b’ + c’ = 1 		   DeMorgan’s
	   c + c’ + b’ = 1    		   Associate
	   1 + b’ = 1                    Associate
	   1 = 1 	                  Identity

# 3. Show (a + c) * (a * d + a * d’) + a * c + c = a + c
   	 (a + c) * (a * (d + d’)) + a * c + c = a + c     Distributive
	 (a + c) * (a * 1) + a * c + c = a + c            Complement
         (a + c) * a + a * c + c = a + c	 	     Identity
	  a + a * c + c = a + c 			     Absorption
          a + c = a + c 	  			     Absorption

# 4. Simplify a’ * (a + b) + (b + a * a) * (a + b’)
            (a’ * a) + (a’ * b) + (b + a * a) * (a + b’) Distributive
	     0 + (a’ * b) + (b + a * a) * (a + b’) 	    Complement
	     0 + (a’ * b) + (b + a) * (a + b’) 	    Idempotence
	     0 + (a’ * b) + a + (b * b’)		    Distributive
	     0 + (a’ * b) + a + 0 			    Complement
	     (a’ * b) + a + 0 				    Identity
	     (a’ * b) + a 				    Identity
	     (a’ + a) * (b + a) 			    Distributive
	     1 * (b + a)				    Complement
	     b + a 					    Identity
		
 # 5. Show (a’ * b’) + (a’ * b) + (a * b’) = (a * b)’
	    a’ * (b’ + b) + (a * b’) = (a * b)’	    Distributive
	    a’ * 1 + (a * b’) = (a * b)’		    Complement 	
	    a’ + (a * b’) = (a * b)’			    Identity
	    (a’ + a) * (a’ + b’) = (a * b)’		    Distributive
	     1 * (a’ + b’) = (a * b)’ 			    Complement
	    (a’ + b’) 	= (a * b)’ 			    Identity
	    (a * b)’ = (a * b)’			    DeMorgan’s


 #6, #7 see lab3.circ


 #8 
	a) 3 bits
	b) 2 bits

    
 #9
	State -> Bits
	$0.00	  000
	$0.05	  001
	$0.10	  010
	$0.15	  011
	$0.20	  100
	$0.25	  101
	$0.25+	  111

	Input -> Bits
	$0.00	  00
	$0.05	  01
	$0.10	  10
	$0.25	  11

10.
	

	S2|S1|S0|In|N2|N1|N0

	0 |0 |0 |00|0 |0 |0
	0 |0 |0 |01|0 |0 |1
	0 |0 |0 |10|0 |1 |0
	0 |0 |0 |11|1 |0 |1

	0 |0 |1 |00|0 |0 |1
	0 |0 |1 |01|0 |1 |0
	0 |0 |1 |10|0 |1 |1
	0 |0 |1 |11|1 |1 |1

	0 |1 |0 |00|0 |1 |0
	0 |1 |0 |01|0 |1 |1
	0 |1 |0 |10|1 |0 |0
	0 |1 |0 |11|1 |1 |1

	0 |1 |1 |00|0 |1 |1
	0 |1 |1 |01|1 |0 |0
	0 |1 |1 |10|1 |0 |1
	0 |1 |1 |11|1 |1 |1

`	1 |0 |0 |00|1 |0 |0
	1 |0 |0 |01|1 |0 |1
	1 |0 |0 |10|1 |1 |1
	1 |0 |0 |11|1 |1 |1

	1 |0 |1 |00|1 |1 |1
	1 |0 |1 |01|1 |1 |1
	1 |0 |1 |10|1 |1 |1
	1 |0 |1 |11|1 |1 |1

	1 |1 |1 |00|1 |1 |1
	1 |1 |1 |01|1 |1 |1
	1 |1 |1 |10|1 |1 |1
	1 |1 |1 |11|1 |1 |1


 if we dispense more than 25¢,the state machine moves to the final 
 state aka 111. Depends on the context and the desired output, the
 machine might output true when reached the final state, else all other
 states output false.





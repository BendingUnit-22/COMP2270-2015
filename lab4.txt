#Rixing Wu
#Lab 4
#Oct 7, 2015

————————————————————————-
Farmer	 |	  | 
Wolf	 |	  |
Goat	 | River  | Home
Cabbage | 	  |
________|________|_______
   0 		      1

Encoding:
Farmer  = F
Wolf    = W
Goat    = G
Cabbage = C

# What information constitutes a state?

  A state should have representation of each object, each object is represented
  by a 0 or a 1, 0 is when the object on the left of the river, the 1 is when 
  the creative is on the desire side of the river.

Possible legal States:

FWGC-    <- start state
WC-FG
FWC-G
C-FWG
FGC-W
G-FWC
FG-WC
W-FGC
FWG-C
-FWGC    <- goal state


#What is an input for this machine?

 The transitions are the inputs for this machine. There are four possible
 transisitons. 

Transitions(inputs):
F - Farmer crosses river alone
W - Farmer crosses river with wolf
G - Farmer crosses river with Goat
C - Farmer crosses river with Cabbage

#How many bits do you need for each?
 There are total 10 possible legal states, 4 bits is enough to represent all the  states. For inputs, there are 4 possible transitions, 2 bits is is enough in this case. 

State	   binary  


FWGC-       0000
WC-FG       0001
FWC-G       0010
C-FWG       0011 
FGC-W       0100 
G-FWC       0101 
FG-WC       0110 
W-FGC       0111 
FWG-C       1000 
-FWGC       1001

FWGC
0000  0000
1010  0001
0010  0010
1110  0011 
0100  0100 
1101  0101 
0101  0110 
1011  0111 
0001  1000 
1111  1001

input       binary
 F            00
 W            01
 G            10
 C            11

F  W  G  C   |in1 in2 | F+ W+ G+ C+ | Out 
0  0  0  0   | 1   0 |  1  0  1  0  |  0
1  0  1  0   | 0   0 |  0  0  1  0  |  0
1  0  1  0   | 1   0 |  0  0  0  0  |  0
0  0  1  0   | 0   0 |  1  0  1  0  |  0
0  0  1  0   | 0   1 |  1  1  1  0  |  0
0  0  1  0   | 1   1 |  1  0  1  1  |  0
1  1  1  0   | 0   1 |  0  0  1  0  |  0
1  1  1  0   | 1   0 |  0  1  0  0  |  0
0  1  0  0   | 1   0 |  1  1  1  0  |  0
0  1  0  0   | 1   1 |  1  1  0  1  |  0
1  1  0  1   | 0   0 |  0  1  0  1  |  0
1  1  0  1   | 0   1 |  0  0  0  1  |  0
1  1  0  1   | 1   1 |  0  1  0  0  |  0
0  1  0  1   | 0   0 |  1  1  0  1  |  0
0  1  0  1   | 1   0 |  1  1  1  1  |  1
1  0  1  1   | 1   0 |  0  0  0  1  |  0
1  0  1  1   | 1   1 |  0  0  1  0  |  0
0  0  0  1   | 0   1 |  1  1  0  1  |  0
0  0  0  1   | 1   0 |  1  0  1  1  |  0

# Is this a Moore or Mealy machine? Why?

The difference between Moore and Mealy is that in a Moore state machine, the outputs depend only on the current state, while in a Mealy state machine, the outputs can also be affected directly by the inputs. In this example, the output is directly based by the type of inputs either F, W, G, or C, so it is a moore machine.




A0 A1 A2 A3  |A4  A5 | T | D1 | D2 | D3 
0  0  0  0   | 1   0 | 1 | 0  | 1  | 0 
1  0  1  0   | 0   0 | 1 | 0  | 1  | 0
1  0  1  0   | 1   0 | 1 | 0  | 0  | 0
0  0  1  0   | 0   0 | 1 | 0  | 1  | 0
0  0  1  0   | 0   1 | 1 | 1  | 1  | 0
0  0  1  0   | 1   1 | 1 | 0  | 1  | 1
1  1  1  0   | 0   1 | 1 | 0  | 1  | 0
1  1  1  0   | 1   0 | 1 | 1  | 0  | 0
0  1  0  0   | 1   0 | 1 | 1  | 1  | 0
0  1  0  0   | 1   1 | 1 | 1  | 0  | 1
1  1  0  1   | 0   0 | 1 | 1  | 0  | 1
1  1  0  1   | 0   1 | 1 | 0  | 0  | 1
1  1  0  1   | 1   1 | 1 | 1  | 0  | 0
0  1  0  1   | 0   0 | 1 | 1  | 0  | 1
0  1  0  1   | 1   0 | 1 | 1  | 1  | 1
1  0  1  1   | 1   0 | 1 | 0  | 0  | 1
1  0  1  1   | 1   1 | 1 | 0  | 1  | 0
0  0  0  1   | 0   1 | 1 | 1  | 0  | 1
0  0  0  1   | 1   0 | 1 | 0  | 1  | 1



Testing

F  W  G  C   |in1 in2 | F+ W+ G+ C+ | Out Passed?
0  0  0  0   | 1   0 |  1  0  1  0  |  0    Y
1  0  1  0   | 0   0 |  0  0  1  0  |  0    Y
1  0  1  0   | 1   0 |  0  0  0  0  |  0    Y
0  0  1  0   | 0   0 |  1  0  1  0  |  0    Y
0  0  1  0   | 0   1 |  1  1  1  0  |  0    Y
0  0  1  0   | 1   1 |  1  0  1  1  |  0    Y
1  1  1  0   | 0   1 |  0  0  1  0  |  0    Y
1  1  1  0   | 1   0 |  0  1  0  0  |  0    Y
0  1  0  0   | 1   0 |  1  1  1  0  |  0    Y
0  1  0  0   | 1   1 |  1  1  0  1  |  0    Y
1  1  0  1   | 0   0 |  0  1  0  1  |  0    Y
1  1  0  1   | 0   1 |  0  0  0  1  |  0    Y
1  1  0  1   | 1   1 |  0  1  0  0  |  0    Y
0  1  0  1   | 0   0 |  1  1  0  1  |  0    Y
0  1  0  1   | 1   0 |  1  1  1  1  |  1    Y
1  0  1  1   | 1   0 |  0  0  0  1  |  0    Y
1  0  1  1   | 1   1 |  0  0  1  0  |  0    Y
0  0  0  1   | 0   1 |  1  1  0  1  |  0    Y
0  0  0  1   | 1   0 |  1  0  1  1  |  0    Y







